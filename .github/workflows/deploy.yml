name: Deploy (Droplet)

on:
  workflow_run:
    workflows: ['Build & Push (GHCR)']
    types: ['completed']

permissions:
  contents: read
  packages: read

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    env:
      APP_DIR: /opt/ecommerce
      GH_OWNER: ${{ github.repository_owner }}
      GH_REPO: ${{ github.event.workflow_run.head_repository.name }}
      GIT_SHA: ${{ github.event.workflow_run.head_sha }}

    steps:
      - name: Checkout repo at built commit
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.workflow_run.head_repository.full_name }}
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DO_SSH_KEY }}

      - name: Trust droplet host key (known_hosts)
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -4 -p "${{ secrets.DO_SSH_PORT || 22 }}" -H ${{ secrets.DO_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
      
      - name: SSH smoke test
        run: |
          ssh -p ${{ secrets.DO_SSH_PORT || 22 }} ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} "echo 'connected to:' \$(hostname) && mkdir -p /opt/ecommerce && ls -la /opt/ecommerce"

      - name: Push manifests to server & template vars
        run: |

          # rsync deploy/ folder (contains Caddyfile + docker-compose.prod.yml)
          rsync -avz -e "ssh -p ${{ secrets.DO_SSH_PORT || 22 }}" \
            deploy/ ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }}:${APP_DIR}/

          # template on server
          ssh -p ${{ secrets.DO_SSH_PORT || 22 }} ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} "
            set -Eeuo pipefail
            APP_DIR=/opt/ecommerce

            # Ensure .env exists
            [ -f ${APP_DIR}/.env ] || (echo 'ERROR: .env missing at ${APP_DIR}/.env' && exit 1)

            # Template Caddyfile placeholders
            sed -i 's/{APP_DOMAIN}/${{ secrets.APP_DOMAIN }}/g; s/{LETSENCRYPT_EMAIL}/${{ secrets.LE_EMAIL }}/g' ${APP_DIR}/Caddyfile

            # Image placeholder
            REPO_LC=\$(echo '${{ env.GH_REPO }}' | tr '[:upper:]' '[:lower:]')
            IMAGE=\"ghcr.io/${{ env.GH_OWNER }}/\${REPO_LC}:sha-${{ env.GIT_SHA }}\"
            ESC_IMAGE=\${IMAGE//\//\\/}
            sed -i \"s#__IMAGE__#\${ESC_IMAGE}#\" \$APP_DIR/docker-compose.prod.yml

            # sanity
            grep -n 'image:' \$APP_DIR/docker-compose.prod.yml || true
          "

      - name: Deploy with Compose
        run: |
          ssh -p ${{ secrets.DO_SSH_PORT || 22 }} ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} "
            set -Eeuo pipefail
            cd ${APP_DIR}
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d --remove-orphans
            docker image prune -f
          "

      - name: Show container status
        run: |
          ssh -p ${{ secrets.DO_SSH_PORT || 22 }} ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} \
            "docker compose -f ${APP_DIR}/docker-compose.prod.yml ps"
